
 Структура проекта

Проект имеет следующую структуру файлов и директорий:

```
.
├── Dockerfile                  # Dockerfile для сборки контейнера приложения
├── docker-compose.yml          # Конфигурация Docker Compose для запуска сервисов
├── go.mod                      # Файл модуля Go с зависимостями проекта
├── go.sum                      # Файл с хэшами зависимостей Go
├── README.md                   # Документация проекта (этот файл)
├── cmd/                        # Директория с точкой входа в приложение
│   └── main.go                 # Основной файл приложения
├── internal/                   # Внутренние модули приложения
│   ├── api/                    # Модуль для обработки HTTP-запросов
│   │   └── handler.go          # Обработчики API (например, REST API)
│   ├── db/                     # Модуль для работы с базой данных
│   │   └── repository.go       # Репозиторий для взаимодействия с БД
│   ├── models/                 # Модуль с моделями данных
│   │   └── wallet.go           # Модель данных для кошелька
│   └── service/                # Модуль бизнес-логики
│       └── wallet_service.go   # Сервис для работы с кошельками
├── pkg/                        # Внешние пакеты, которые могут быть использованы в других проектах
│   └── config/                 # Модуль для работы с конфигурацией
│       └── config.go           # Файл конфигурации
├── tests/                      # Директория с тестами
│   └── api_test.go             # Тесты для API
└── tools/                      # Директория с инструментами для разработки
```

---

 Описание директорий и файлов

1. Dockerfile
   Используется для создания Docker-образа приложения. Содержит инструкции для сборки и запуска приложения в контейнере.

2. docker-compose.yml
   Конфигурационный файл для Docker Compose, который позволяет запускать несколько сервисов (например, приложение и базу данных) вместе.

3. go.mod` и `go.sum
   Файлы модуля Go. В `go.mod` указаны зависимости проекта, а в `go.sum` хранятся хэши для проверки целостности зависимостей.

4. cmd/main.go
   Точка входа в приложение. Содержит основную логику запуска сервиса.

5. internal/ 
   Директория для внутренних модулей приложения:
   - **`api/handler.go`**: Обработчики HTTP-запросов (например, REST API).
   - **`db/repository.go`**: Репозиторий для взаимодействия с базой данных.
   - **`models/wallet.go`**: Модели данных, описывающие структуру кошелька.
   - **`service/wallet_service.go`**: Бизнес-логика приложения, связанная с кошельками.

6. pkg/config/config.go
   Модуль для работы с конфигурацией приложения. Содержит функции для загрузки и управления настройками.

7. tests/api_test.go
   Тесты для API приложения. Используются для проверки корректности работы обработчиков.

8. tools/
   Директория для хранения вспомогательных инструментов, используемых в процессе разработки.

---

 Как запустить проект

1. Убедитесь, что у вас установлены Docker и Docker Compose.
2. Соберите и запустите проект с помощью команды:
   ```bash
   docker-compose up --build
   ```
3. Приложение будет доступно по адресу: `http://localhost:8080`.
4. Для использования необходимо отправлять curl-запросы, несколько примеров:
1). Получение баланса кошелька

    
     Запрос:
    ```bash
    curl -X GET http://localhost:8080/api/v1/wallets/2
    ```
    
     Ответ:
    ```json
    {"balance": 500}
    ```
    
    ---
    
    Запрос:
    ```bash
    curl -X GET http://localhost:8080/api/v1/wallets/3
    ```
    
     Ответ:
    ```json
    {"balance": 1601.5}
    ```
    
    ---


 2. Пополнение баланса кошелька

     Запрос:
    ```bash
    curl -X POST http://localhost:8080/api/v1/wallets/3/operations \
    -H "Content-Type: application/json" \
    -d '{
      "operationType": "DEPOSIT", 
      "amount": 1000.50
    }'
    ```
    
     Ответ:
    ```json
    {"balance": 2602}
    ```
    
    ---
    
     Запрос:
    ```bash
    curl -X POST http://localhost:8080/api/v1/wallets/3/operations \
    -H "Content-Type: application/json" \
    -d '{
      "operationType": "DEPOSIT",
      "amount": 1000.50
    }'
    ```
    
     Ответ:
    ```json
    {"balance": 3602.5}
    ```
    
    ---

 3. Снятие средств с кошелька

     Запрос:
    ```bash
    curl -X POST http://localhost:8080/api/v1/wallets/3/operations \
    -H "Content-Type: application/json" \
    -d '{
      "operationType": "WITHDRAW",
      "amount": 500
    }'
    ```
    
     Ответ:
    ```json
    {"balance": 3102.5}
    ```
    
    ---

 4. Ошибка при недостаточном балансе
    
     Запрос:
    ```bash
    curl -X POST http://localhost:8080/api/v1/wallets/1/operations \
    -H "Content-Type: application/json" \
    -d '{
      "operationType": "WITHDRAW",
      "amount": 1000
    }'
    ```
    
     Ответ:
    ```json
    {"error": "insufficient funds"}
    ```

---

